// automatically generated by rust-bindgen

pub const _MATH_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const QuEST_PREC: u32 = 2;
pub const MPI_MAX_AMPS_IN_MSG: u32 = 268435456;
pub const REAL_STRING_FORMAT: &'static [u8; 6usize] = b"%.14f\0";
pub const REAL_QASM_FORMAT: &'static [u8; 6usize] = b"%.14g\0";
pub const REAL_EPS: f64 = 0.0000000000001;
pub const REAL_SPECIFIER: &'static [u8; 4usize] = b"%lf\0";
pub const MAX_NUM_REGS_APPLY_ARBITRARY_PHASE: u32 = 100;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsig(
        __x: f64,
        __y: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(
        __y: f64,
        __x: f64,
    ) -> f64;
}
extern "C" {
    pub fn __atan2(
        __y: f64,
        __x: f64,
    ) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(
        __x: f64,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn __frexp(
        __x: f64,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn ldexp(
        __x: f64,
        __exponent: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn __ldexp(
        __x: f64,
        __exponent: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(
        __x: f64,
        __iptr: *mut f64,
    ) -> f64;
}
extern "C" {
    pub fn __modf(
        __x: f64,
        __iptr: *mut f64,
    ) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __pow(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __hypot(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __fmod(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __drem(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __copysign(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> f64;
}
extern "C" {
    pub fn __jn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> f64;
}
extern "C" {
    pub fn __yn(
        arg1: ::std::os::raw::c_int,
        arg2: f64,
    ) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(
        arg1: f64,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn __lgamma_r(
        arg1: f64,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __nextafter(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn nexttoward(
        __x: f64,
        __y: u128,
    ) -> f64;
}
extern "C" {
    pub fn __nexttoward(
        __x: f64,
        __y: u128,
    ) -> f64;
}
extern "C" {
    pub fn remainder(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __remainder(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn scalbn(
        __x: f64,
        __n: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn __scalbn(
        __x: f64,
        __n: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(
        __x: f64,
        __n: ::std::os::raw::c_long,
    ) -> f64;
}
extern "C" {
    pub fn __scalbln(
        __x: f64,
        __n: ::std::os::raw::c_long,
    ) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(
        __x: f64,
        __y: f64,
        __quo: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn __remquo(
        __x: f64,
        __y: f64,
        __quo: *mut ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __fdim(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn fmax(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __fmax(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn fmin(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn __fmin(
        __x: f64,
        __y: f64,
    ) -> f64;
}
extern "C" {
    pub fn fma(
        __x: f64,
        __y: f64,
        __z: f64,
    ) -> f64;
}
extern "C" {
    pub fn __fma(
        __x: f64,
        __y: f64,
        __z: f64,
    ) -> f64;
}
extern "C" {
    pub fn scalb(
        __x: f64,
        __n: f64,
    ) -> f64;
}
extern "C" {
    pub fn __scalb(
        __x: f64,
        __n: f64,
    ) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigf(
        __x: f32,
        __y: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(
        __y: f32,
        __x: f32,
    ) -> f32;
}
extern "C" {
    pub fn __atan2f(
        __y: f32,
        __x: f32,
    ) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(
        __x: f32,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn __frexpf(
        __x: f32,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn ldexpf(
        __x: f32,
        __exponent: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn __ldexpf(
        __x: f32,
        __exponent: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(
        __x: f32,
        __iptr: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn __modff(
        __x: f32,
        __iptr: *mut f32,
    ) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __powf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __hypotf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __fmodf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __dremf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __copysignf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(
        arg1: ::std::os::raw::c_int,
        arg2: f32,
    ) -> f32;
}
extern "C" {
    pub fn __jnf(
        arg1: ::std::os::raw::c_int,
        arg2: f32,
    ) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(
        arg1: ::std::os::raw::c_int,
        arg2: f32,
    ) -> f32;
}
extern "C" {
    pub fn __ynf(
        arg1: ::std::os::raw::c_int,
        arg2: f32,
    ) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(
        arg1: f32,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(
        arg1: f32,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __nextafterf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn nexttowardf(
        __x: f32,
        __y: u128,
    ) -> f32;
}
extern "C" {
    pub fn __nexttowardf(
        __x: f32,
        __y: u128,
    ) -> f32;
}
extern "C" {
    pub fn remainderf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __remainderf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn scalbnf(
        __x: f32,
        __n: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn __scalbnf(
        __x: f32,
        __n: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(
        __x: f32,
        __n: ::std::os::raw::c_long,
    ) -> f32;
}
extern "C" {
    pub fn __scalblnf(
        __x: f32,
        __n: ::std::os::raw::c_long,
    ) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(
        __x: f32,
        __y: f32,
        __quo: *mut ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn __remquof(
        __x: f32,
        __y: f32,
        __quo: *mut ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __fdimf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn fmaxf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __fmaxf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn fminf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn __fminf(
        __x: f32,
        __y: f32,
    ) -> f32;
}
extern "C" {
    pub fn fmaf(
        __x: f32,
        __y: f32,
        __z: f32,
    ) -> f32;
}
extern "C" {
    pub fn __fmaf(
        __x: f32,
        __y: f32,
        __z: f32,
    ) -> f32;
}
extern "C" {
    pub fn scalbf(
        __x: f32,
        __n: f32,
    ) -> f32;
}
extern "C" {
    pub fn __scalbf(
        __x: f32,
        __n: f32,
    ) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iseqsigl(
        __x: u128,
        __y: u128,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(
        __y: u128,
        __x: u128,
    ) -> u128;
}
extern "C" {
    pub fn __atan2l(
        __y: u128,
        __x: u128,
    ) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(
        __x: u128,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn __frexpl(
        __x: u128,
        __exponent: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn ldexpl(
        __x: u128,
        __exponent: ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn __ldexpl(
        __x: u128,
        __exponent: ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(
        __x: u128,
        __iptr: *mut u128,
    ) -> u128;
}
extern "C" {
    pub fn __modfl(
        __x: u128,
        __iptr: *mut u128,
    ) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __powl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __hypotl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __fmodl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __dreml(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __copysignl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(
        arg1: ::std::os::raw::c_int,
        arg2: u128,
    ) -> u128;
}
extern "C" {
    pub fn __jnl(
        arg1: ::std::os::raw::c_int,
        arg2: u128,
    ) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(
        arg1: ::std::os::raw::c_int,
        arg2: u128,
    ) -> u128;
}
extern "C" {
    pub fn __ynl(
        arg1: ::std::os::raw::c_int,
        arg2: u128,
    ) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(
        arg1: u128,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn __lgammal_r(
        arg1: u128,
        __signgamp: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __nextafterl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn nexttowardl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __nexttowardl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn remainderl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __remainderl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn scalbnl(
        __x: u128,
        __n: ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn __scalbnl(
        __x: u128,
        __n: ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(
        __x: u128,
        __n: ::std::os::raw::c_long,
    ) -> u128;
}
extern "C" {
    pub fn __scalblnl(
        __x: u128,
        __n: ::std::os::raw::c_long,
    ) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(
        __x: u128,
        __y: u128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn __remquol(
        __x: u128,
        __y: u128,
        __quo: *mut ::std::os::raw::c_int,
    ) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __fdiml(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn fmaxl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __fmaxl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn fminl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn __fminl(
        __x: u128,
        __y: u128,
    ) -> u128;
}
extern "C" {
    pub fn fmal(
        __x: u128,
        __y: u128,
        __z: u128,
    ) -> u128;
}
extern "C" {
    pub fn __fmal(
        __x: u128,
        __y: u128,
        __z: u128,
    ) -> u128;
}
extern "C" {
    pub fn scalbl(
        __x: u128,
        __n: u128,
    ) -> u128;
}
extern "C" {
    pub fn __scalbl(
        __x: u128,
        __n: u128,
    ) -> u128;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = 0;
pub const FP_INFINITE: _bindgen_ty_1 = 1;
pub const FP_ZERO: _bindgen_ty_1 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_1 = 3;
pub const FP_NORMAL: _bindgen_ty_1 = 4;
pub type _bindgen_ty_1 = u32;
pub const phaseGateType_SIGMA_Z: phaseGateType = 0;
pub const phaseGateType_S_GATE: phaseGateType = 1;
pub const phaseGateType_T_GATE: phaseGateType = 2;
pub type phaseGateType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QASMLogger {
    pub buffer:     *mut ::std::os::raw::c_char,
    pub bufferSize: ::std::os::raw::c_int,
    pub bufferFill: ::std::os::raw::c_int,
    pub isLogging:  ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_QASMLogger() {
    assert_eq!(
        ::std::mem::size_of::<QASMLogger>(),
        24usize,
        concat!("Size of: ", stringify!(QASMLogger))
    );
    assert_eq!(
        ::std::mem::align_of::<QASMLogger>(),
        8usize,
        concat!("Alignment of ", stringify!(QASMLogger))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QASMLogger>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QASMLogger),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QASMLogger>())).bufferSize as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QASMLogger),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QASMLogger>())).bufferFill as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(QASMLogger),
            "::",
            stringify!(bufferFill)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QASMLogger>())).isLogging as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QASMLogger),
            "::",
            stringify!(isLogging)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComplexArray {
    pub real: *mut f64,
    pub imag: *mut f64,
}
#[test]
fn bindgen_test_layout_ComplexArray() {
    assert_eq!(
        ::std::mem::size_of::<ComplexArray>(),
        16usize,
        concat!("Size of: ", stringify!(ComplexArray))
    );
    assert_eq!(
        ::std::mem::align_of::<ComplexArray>(),
        8usize,
        concat!("Alignment of ", stringify!(ComplexArray))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexArray>())).real as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexArray),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexArray>())).imag as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexArray),
            "::",
            stringify!(imag)
        )
    );
}
pub const pauliOpType_PAULI_I: pauliOpType = 0;
pub const pauliOpType_PAULI_X: pauliOpType = 1;
pub const pauliOpType_PAULI_Y: pauliOpType = 2;
pub const pauliOpType_PAULI_Z: pauliOpType = 3;
pub type pauliOpType = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Complex {
    pub real: f64,
    pub imag: f64,
}
#[test]
fn bindgen_test_layout_Complex() {
    assert_eq!(
        ::std::mem::size_of::<Complex>(),
        16usize,
        concat!("Size of: ", stringify!(Complex))
    );
    assert_eq!(
        ::std::mem::align_of::<Complex>(),
        8usize,
        concat!("Alignment of ", stringify!(Complex))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Complex>())).real as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Complex),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Complex>())).imag as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Complex),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComplexMatrix2 {
    pub real: [[f64; 2usize]; 2usize],
    pub imag: [[f64; 2usize]; 2usize],
}
#[test]
fn bindgen_test_layout_ComplexMatrix2() {
    assert_eq!(
        ::std::mem::size_of::<ComplexMatrix2>(),
        64usize,
        concat!("Size of: ", stringify!(ComplexMatrix2))
    );
    assert_eq!(
        ::std::mem::align_of::<ComplexMatrix2>(),
        8usize,
        concat!("Alignment of ", stringify!(ComplexMatrix2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrix2>())).real as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrix2),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrix2>())).imag as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrix2),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComplexMatrix4 {
    pub real: [[f64; 4usize]; 4usize],
    pub imag: [[f64; 4usize]; 4usize],
}
#[test]
fn bindgen_test_layout_ComplexMatrix4() {
    assert_eq!(
        ::std::mem::size_of::<ComplexMatrix4>(),
        256usize,
        concat!("Size of: ", stringify!(ComplexMatrix4))
    );
    assert_eq!(
        ::std::mem::align_of::<ComplexMatrix4>(),
        8usize,
        concat!("Alignment of ", stringify!(ComplexMatrix4))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrix4>())).real as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrix4),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrix4>())).imag as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrix4),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComplexMatrixN {
    pub numQubits: ::std::os::raw::c_int,
    pub real:      *mut *mut f64,
    pub imag:      *mut *mut f64,
}
#[test]
fn bindgen_test_layout_ComplexMatrixN() {
    assert_eq!(
        ::std::mem::size_of::<ComplexMatrixN>(),
        24usize,
        concat!("Size of: ", stringify!(ComplexMatrixN))
    );
    assert_eq!(
        ::std::mem::align_of::<ComplexMatrixN>(),
        8usize,
        concat!("Alignment of ", stringify!(ComplexMatrixN))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrixN>())).numQubits as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrixN),
            "::",
            stringify!(numQubits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrixN>())).real as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrixN),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ComplexMatrixN>())).imag as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ComplexMatrixN),
            "::",
            stringify!(imag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vector {
    pub x: f64,
    pub y: f64,
    pub z: f64,
}
#[test]
fn bindgen_test_layout_Vector() {
    assert_eq!(
        ::std::mem::size_of::<Vector>(),
        24usize,
        concat!("Size of: ", stringify!(Vector))
    );
    assert_eq!(
        ::std::mem::align_of::<Vector>(),
        8usize,
        concat!("Alignment of ", stringify!(Vector))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vector>())).x as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Vector), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vector>())).y as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Vector), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Vector>())).z as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Vector), "::", stringify!(z))
    );
}
pub const phaseFunc_NORM: phaseFunc = 0;
pub const phaseFunc_SCALED_NORM: phaseFunc = 1;
pub const phaseFunc_INVERSE_NORM: phaseFunc = 2;
pub const phaseFunc_SCALED_INVERSE_NORM: phaseFunc = 3;
pub const phaseFunc_SCALED_INVERSE_SHIFTED_NORM: phaseFunc = 4;
pub const phaseFunc_PRODUCT: phaseFunc = 5;
pub const phaseFunc_SCALED_PRODUCT: phaseFunc = 6;
pub const phaseFunc_INVERSE_PRODUCT: phaseFunc = 7;
pub const phaseFunc_SCALED_INVERSE_PRODUCT: phaseFunc = 8;
pub const phaseFunc_DISTANCE: phaseFunc = 9;
pub const phaseFunc_SCALED_DISTANCE: phaseFunc = 10;
pub const phaseFunc_INVERSE_DISTANCE: phaseFunc = 11;
pub const phaseFunc_SCALED_INVERSE_DISTANCE: phaseFunc = 12;
pub const phaseFunc_SCALED_INVERSE_SHIFTED_DISTANCE: phaseFunc = 13;
pub type phaseFunc = u32;
pub const bitEncoding_UNSIGNED: bitEncoding = 0;
pub const bitEncoding_TWOS_COMPLEMENT: bitEncoding = 1;
pub type bitEncoding = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PauliHamil {
    pub pauliCodes:  *mut pauliOpType,
    pub termCoeffs:  *mut f64,
    pub numSumTerms: ::std::os::raw::c_int,
    pub numQubits:   ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PauliHamil() {
    assert_eq!(
        ::std::mem::size_of::<PauliHamil>(),
        24usize,
        concat!("Size of: ", stringify!(PauliHamil))
    );
    assert_eq!(
        ::std::mem::align_of::<PauliHamil>(),
        8usize,
        concat!("Alignment of ", stringify!(PauliHamil))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PauliHamil>())).pauliCodes as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PauliHamil),
            "::",
            stringify!(pauliCodes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PauliHamil>())).termCoeffs as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PauliHamil),
            "::",
            stringify!(termCoeffs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PauliHamil>())).numSumTerms as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PauliHamil),
            "::",
            stringify!(numSumTerms)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PauliHamil>())).numQubits as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PauliHamil),
            "::",
            stringify!(numQubits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DiagonalOp {
    pub numQubits:        ::std::os::raw::c_int,
    pub numElemsPerChunk: ::std::os::raw::c_longlong,
    pub numChunks:        ::std::os::raw::c_int,
    pub chunkId:          ::std::os::raw::c_int,
    pub real:             *mut f64,
    pub imag:             *mut f64,
    pub deviceOperator:   ComplexArray,
}
#[test]
fn bindgen_test_layout_DiagonalOp() {
    assert_eq!(
        ::std::mem::size_of::<DiagonalOp>(),
        56usize,
        concat!("Size of: ", stringify!(DiagonalOp))
    );
    assert_eq!(
        ::std::mem::align_of::<DiagonalOp>(),
        8usize,
        concat!("Alignment of ", stringify!(DiagonalOp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).numQubits as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(numQubits)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).numElemsPerChunk as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(numElemsPerChunk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).numChunks as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(numChunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).chunkId as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(chunkId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).real as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).imag as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(imag)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<DiagonalOp>())).deviceOperator as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(DiagonalOp),
            "::",
            stringify!(deviceOperator)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Qureg {
    pub isDensityMatrix:      ::std::os::raw::c_int,
    pub numQubitsRepresented: ::std::os::raw::c_int,
    pub numQubitsInStateVec:  ::std::os::raw::c_int,
    pub numAmpsPerChunk:      ::std::os::raw::c_longlong,
    pub numAmpsTotal:         ::std::os::raw::c_longlong,
    pub chunkId:              ::std::os::raw::c_int,
    pub numChunks:            ::std::os::raw::c_int,
    pub stateVec:             ComplexArray,
    pub pairStateVec:         ComplexArray,
    pub deviceStateVec:       ComplexArray,
    pub firstLevelReduction:  *mut f64,
    pub secondLevelReduction: *mut f64,
    pub qasmLog:              *mut QASMLogger,
}
#[test]
fn bindgen_test_layout_Qureg() {
    assert_eq!(
        ::std::mem::size_of::<Qureg>(),
        112usize,
        concat!("Size of: ", stringify!(Qureg))
    );
    assert_eq!(
        ::std::mem::align_of::<Qureg>(),
        8usize,
        concat!("Alignment of ", stringify!(Qureg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).isDensityMatrix as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(isDensityMatrix)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).numQubitsRepresented as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(numQubitsRepresented)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).numQubitsInStateVec as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(numQubitsInStateVec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).numAmpsPerChunk as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(numAmpsPerChunk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).numAmpsTotal as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(numAmpsTotal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).chunkId as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(chunkId)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).numChunks as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(numChunks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).stateVec as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(stateVec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).pairStateVec as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(pairStateVec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).deviceStateVec as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(deviceStateVec)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).firstLevelReduction as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(firstLevelReduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).secondLevelReduction as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(secondLevelReduction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Qureg>())).qasmLog as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Qureg),
            "::",
            stringify!(qasmLog)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct QuESTEnv {
    pub rank:     ::std::os::raw::c_int,
    pub numRanks: ::std::os::raw::c_int,
    pub seeds:    *mut ::std::os::raw::c_ulong,
    pub numSeeds: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_QuESTEnv() {
    assert_eq!(
        ::std::mem::size_of::<QuESTEnv>(),
        24usize,
        concat!("Size of: ", stringify!(QuESTEnv))
    );
    assert_eq!(
        ::std::mem::align_of::<QuESTEnv>(),
        8usize,
        concat!("Alignment of ", stringify!(QuESTEnv))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QuESTEnv>())).rank as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(QuESTEnv),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QuESTEnv>())).numRanks as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(QuESTEnv),
            "::",
            stringify!(numRanks)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QuESTEnv>())).seeds as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QuESTEnv),
            "::",
            stringify!(seeds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<QuESTEnv>())).numSeeds as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(QuESTEnv),
            "::",
            stringify!(numSeeds)
        )
    );
}
extern "C" {
    pub fn createQureg(
        numQubits: ::std::os::raw::c_int,
        env: QuESTEnv,
    ) -> Qureg;
}
extern "C" {
    pub fn createDensityQureg(
        numQubits: ::std::os::raw::c_int,
        env: QuESTEnv,
    ) -> Qureg;
}
extern "C" {
    pub fn createCloneQureg(
        qureg: Qureg,
        env: QuESTEnv,
    ) -> Qureg;
}
extern "C" {
    pub fn destroyQureg(
        qureg: Qureg,
        env: QuESTEnv,
    );
}
extern "C" {
    pub fn createComplexMatrixN(
        numQubits: ::std::os::raw::c_int
    ) -> ComplexMatrixN;
}
extern "C" {
    pub fn destroyComplexMatrixN(matr: ComplexMatrixN);
}
extern "C" {
    pub fn initComplexMatrixN(
        m: ComplexMatrixN,
        real: *mut *mut f64,
        imag: *mut *mut f64,
    );
}
extern "C" {
    pub fn createPauliHamil(
        numQubits: ::std::os::raw::c_int,
        numSumTerms: ::std::os::raw::c_int,
    ) -> PauliHamil;
}
extern "C" {
    pub fn destroyPauliHamil(hamil: PauliHamil);
}
extern "C" {
    pub fn createPauliHamilFromFile(
        fn_: *mut ::std::os::raw::c_char
    ) -> PauliHamil;
}
extern "C" {
    pub fn initPauliHamil(
        hamil: PauliHamil,
        coeffs: *mut f64,
        codes: *mut pauliOpType,
    );
}
extern "C" {
    pub fn createDiagonalOp(
        numQubits: ::std::os::raw::c_int,
        env: QuESTEnv,
    ) -> DiagonalOp;
}
extern "C" {
    pub fn destroyDiagonalOp(
        op: DiagonalOp,
        env: QuESTEnv,
    );
}
extern "C" {
    pub fn syncDiagonalOp(op: DiagonalOp);
}
extern "C" {
    pub fn initDiagonalOp(
        op: DiagonalOp,
        real: *mut f64,
        imag: *mut f64,
    );
}
extern "C" {
    pub fn initDiagonalOpFromPauliHamil(
        op: DiagonalOp,
        hamil: PauliHamil,
    );
}
extern "C" {
    pub fn createDiagonalOpFromPauliHamilFile(
        fn_: *mut ::std::os::raw::c_char,
        env: QuESTEnv,
    ) -> DiagonalOp;
}
extern "C" {
    pub fn setDiagonalOpElems(
        op: DiagonalOp,
        startInd: ::std::os::raw::c_longlong,
        real: *mut f64,
        imag: *mut f64,
        numElems: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn applyDiagonalOp(
        qureg: Qureg,
        op: DiagonalOp,
    );
}
extern "C" {
    pub fn calcExpecDiagonalOp(
        qureg: Qureg,
        op: DiagonalOp,
    ) -> Complex;
}
extern "C" {
    pub fn reportState(qureg: Qureg);
}
extern "C" {
    pub fn reportStateToScreen(
        qureg: Qureg,
        env: QuESTEnv,
        reportRank: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn reportQuregParams(qureg: Qureg);
}
extern "C" {
    pub fn reportPauliHamil(hamil: PauliHamil);
}
extern "C" {
    pub fn getNumQubits(qureg: Qureg) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getNumAmps(qureg: Qureg) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn initBlankState(qureg: Qureg);
}
extern "C" {
    pub fn initZeroState(qureg: Qureg);
}
extern "C" {
    pub fn initPlusState(qureg: Qureg);
}
extern "C" {
    pub fn initClassicalState(
        qureg: Qureg,
        stateInd: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn initPureState(
        qureg: Qureg,
        pure_: Qureg,
    );
}
extern "C" {
    pub fn initDebugState(qureg: Qureg);
}
extern "C" {
    pub fn initStateFromAmps(
        qureg: Qureg,
        reals: *mut f64,
        imags: *mut f64,
    );
}
extern "C" {
    pub fn setAmps(
        qureg: Qureg,
        startInd: ::std::os::raw::c_longlong,
        reals: *mut f64,
        imags: *mut f64,
        numAmps: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn setDensityAmps(
        qureg: Qureg,
        startRow: ::std::os::raw::c_longlong,
        startCol: ::std::os::raw::c_longlong,
        reals: *mut f64,
        imags: *mut f64,
        numAmps: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn cloneQureg(
        targetQureg: Qureg,
        copyQureg: Qureg,
    );
}
extern "C" {
    pub fn phaseShift(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn controlledPhaseShift(
        qureg: Qureg,
        idQubit1: ::std::os::raw::c_int,
        idQubit2: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn multiControlledPhaseShift(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        numControlQubits: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn controlledPhaseFlip(
        qureg: Qureg,
        idQubit1: ::std::os::raw::c_int,
        idQubit2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn multiControlledPhaseFlip(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        numControlQubits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sGate(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tGate(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn createQuESTEnv() -> QuESTEnv;
}
extern "C" {
    pub fn destroyQuESTEnv(env: QuESTEnv);
}
extern "C" {
    pub fn syncQuESTEnv(env: QuESTEnv);
}
extern "C" {
    pub fn syncQuESTSuccess(
        successCode: ::std::os::raw::c_int
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn reportQuESTEnv(env: QuESTEnv);
}
extern "C" {
    pub fn getEnvironmentString(
        env: QuESTEnv,
        str: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn copyStateToGPU(qureg: Qureg);
}
extern "C" {
    pub fn copyStateFromGPU(qureg: Qureg);
}
extern "C" {
    pub fn copySubstateToGPU(
        qureg: Qureg,
        startInd: ::std::os::raw::c_longlong,
        numAmps: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn copySubstateFromGPU(
        qureg: Qureg,
        startInd: ::std::os::raw::c_longlong,
        numAmps: ::std::os::raw::c_longlong,
    );
}
extern "C" {
    pub fn getAmp(
        qureg: Qureg,
        index: ::std::os::raw::c_longlong,
    ) -> Complex;
}
extern "C" {
    pub fn getRealAmp(
        qureg: Qureg,
        index: ::std::os::raw::c_longlong,
    ) -> f64;
}
extern "C" {
    pub fn getImagAmp(
        qureg: Qureg,
        index: ::std::os::raw::c_longlong,
    ) -> f64;
}
extern "C" {
    pub fn getProbAmp(
        qureg: Qureg,
        index: ::std::os::raw::c_longlong,
    ) -> f64;
}
extern "C" {
    pub fn getDensityAmp(
        qureg: Qureg,
        row: ::std::os::raw::c_longlong,
        col: ::std::os::raw::c_longlong,
    ) -> Complex;
}
extern "C" {
    pub fn calcTotalProb(qureg: Qureg) -> f64;
}
extern "C" {
    pub fn compactUnitary(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        alpha: Complex,
        beta: Complex,
    );
}
extern "C" {
    pub fn unitary(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        u: ComplexMatrix2,
    );
}
extern "C" {
    pub fn rotateX(
        qureg: Qureg,
        rotQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn rotateY(
        qureg: Qureg,
        rotQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn rotateZ(
        qureg: Qureg,
        rotQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn rotateAroundAxis(
        qureg: Qureg,
        rotQubit: ::std::os::raw::c_int,
        angle: f64,
        axis: Vector,
    );
}
extern "C" {
    pub fn controlledRotateX(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn controlledRotateY(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn controlledRotateZ(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn controlledRotateAroundAxis(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        angle: f64,
        axis: Vector,
    );
}
extern "C" {
    pub fn controlledCompactUnitary(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        alpha: Complex,
        beta: Complex,
    );
}
extern "C" {
    pub fn controlledUnitary(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        u: ComplexMatrix2,
    );
}
extern "C" {
    pub fn multiControlledUnitary(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        numControlQubits: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        u: ComplexMatrix2,
    );
}
extern "C" {
    pub fn pauliX(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pauliY(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pauliZ(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn hadamard(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn controlledNot(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn multiControlledMultiQubitNot(
        qureg: Qureg,
        ctrls: *mut ::std::os::raw::c_int,
        numCtrls: ::std::os::raw::c_int,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn multiQubitNot(
        qureg: Qureg,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn controlledPauliY(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn calcProbOfOutcome(
        qureg: Qureg,
        measureQubit: ::std::os::raw::c_int,
        outcome: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn calcProbOfAllOutcomes(
        outcomeProbs: *mut f64,
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn collapseToOutcome(
        qureg: Qureg,
        measureQubit: ::std::os::raw::c_int,
        outcome: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    pub fn measure(
        qureg: Qureg,
        measureQubit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn measureWithStats(
        qureg: Qureg,
        measureQubit: ::std::os::raw::c_int,
        outcomeProb: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn calcInnerProduct(
        bra: Qureg,
        ket: Qureg,
    ) -> Complex;
}
extern "C" {
    pub fn calcDensityInnerProduct(
        rho1: Qureg,
        rho2: Qureg,
    ) -> f64;
}
extern "C" {
    pub fn seedQuESTDefault(env: *mut QuESTEnv);
}
extern "C" {
    pub fn seedQuEST(
        env: *mut QuESTEnv,
        seedArray: *mut ::std::os::raw::c_ulong,
        numSeeds: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn getQuESTSeeds(
        env: QuESTEnv,
        seeds: *mut *mut ::std::os::raw::c_ulong,
        numSeeds: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn startRecordingQASM(qureg: Qureg);
}
extern "C" {
    pub fn stopRecordingQASM(qureg: Qureg);
}
extern "C" {
    pub fn clearRecordedQASM(qureg: Qureg);
}
extern "C" {
    pub fn printRecordedQASM(qureg: Qureg);
}
extern "C" {
    pub fn writeRecordedQASMToFile(
        qureg: Qureg,
        filename: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mixDephasing(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        prob: f64,
    );
}
extern "C" {
    pub fn mixTwoQubitDephasing(
        qureg: Qureg,
        qubit1: ::std::os::raw::c_int,
        qubit2: ::std::os::raw::c_int,
        prob: f64,
    );
}
extern "C" {
    pub fn mixDepolarising(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        prob: f64,
    );
}
extern "C" {
    pub fn mixDamping(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        prob: f64,
    );
}
extern "C" {
    pub fn mixTwoQubitDepolarising(
        qureg: Qureg,
        qubit1: ::std::os::raw::c_int,
        qubit2: ::std::os::raw::c_int,
        prob: f64,
    );
}
extern "C" {
    pub fn mixPauli(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        probX: f64,
        probY: f64,
        probZ: f64,
    );
}
extern "C" {
    pub fn mixDensityMatrix(
        combineQureg: Qureg,
        prob: f64,
        otherQureg: Qureg,
    );
}
extern "C" {
    pub fn calcPurity(qureg: Qureg) -> f64;
}
extern "C" {
    pub fn calcFidelity(
        qureg: Qureg,
        pureState: Qureg,
    ) -> f64;
}
extern "C" {
    pub fn swapGate(
        qureg: Qureg,
        qubit1: ::std::os::raw::c_int,
        qubit2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sqrtSwapGate(
        qureg: Qureg,
        qb1: ::std::os::raw::c_int,
        qb2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn multiStateControlledUnitary(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        controlState: *mut ::std::os::raw::c_int,
        numControlQubits: ::std::os::raw::c_int,
        targetQubit: ::std::os::raw::c_int,
        u: ComplexMatrix2,
    );
}
extern "C" {
    pub fn multiRotateZ(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubits: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn multiRotatePauli(
        qureg: Qureg,
        targetQubits: *mut ::std::os::raw::c_int,
        targetPaulis: *mut pauliOpType,
        numTargets: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn multiControlledMultiRotateZ(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        numControls: ::std::os::raw::c_int,
        targetQubits: *mut ::std::os::raw::c_int,
        numTargets: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn multiControlledMultiRotatePauli(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        numControls: ::std::os::raw::c_int,
        targetQubits: *mut ::std::os::raw::c_int,
        targetPaulis: *mut pauliOpType,
        numTargets: ::std::os::raw::c_int,
        angle: f64,
    );
}
extern "C" {
    pub fn calcExpecPauliProd(
        qureg: Qureg,
        targetQubits: *mut ::std::os::raw::c_int,
        pauliCodes: *mut pauliOpType,
        numTargets: ::std::os::raw::c_int,
        workspace: Qureg,
    ) -> f64;
}
extern "C" {
    pub fn calcExpecPauliSum(
        qureg: Qureg,
        allPauliCodes: *mut pauliOpType,
        termCoeffs: *mut f64,
        numSumTerms: ::std::os::raw::c_int,
        workspace: Qureg,
    ) -> f64;
}
extern "C" {
    pub fn calcExpecPauliHamil(
        qureg: Qureg,
        hamil: PauliHamil,
        workspace: Qureg,
    ) -> f64;
}
extern "C" {
    pub fn twoQubitUnitary(
        qureg: Qureg,
        targetQubit1: ::std::os::raw::c_int,
        targetQubit2: ::std::os::raw::c_int,
        u: ComplexMatrix4,
    );
}
extern "C" {
    pub fn controlledTwoQubitUnitary(
        qureg: Qureg,
        controlQubit: ::std::os::raw::c_int,
        targetQubit1: ::std::os::raw::c_int,
        targetQubit2: ::std::os::raw::c_int,
        u: ComplexMatrix4,
    );
}
extern "C" {
    pub fn multiControlledTwoQubitUnitary(
        qureg: Qureg,
        controlQubits: *mut ::std::os::raw::c_int,
        numControlQubits: ::std::os::raw::c_int,
        targetQubit1: ::std::os::raw::c_int,
        targetQubit2: ::std::os::raw::c_int,
        u: ComplexMatrix4,
    );
}
extern "C" {
    pub fn multiQubitUnitary(
        qureg: Qureg,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
        u: ComplexMatrixN,
    );
}
extern "C" {
    pub fn controlledMultiQubitUnitary(
        qureg: Qureg,
        ctrl: ::std::os::raw::c_int,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
        u: ComplexMatrixN,
    );
}
extern "C" {
    pub fn multiControlledMultiQubitUnitary(
        qureg: Qureg,
        ctrls: *mut ::std::os::raw::c_int,
        numCtrls: ::std::os::raw::c_int,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
        u: ComplexMatrixN,
    );
}
extern "C" {
    pub fn mixKrausMap(
        qureg: Qureg,
        target: ::std::os::raw::c_int,
        ops: *mut ComplexMatrix2,
        numOps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mixTwoQubitKrausMap(
        qureg: Qureg,
        target1: ::std::os::raw::c_int,
        target2: ::std::os::raw::c_int,
        ops: *mut ComplexMatrix4,
        numOps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mixMultiQubitKrausMap(
        qureg: Qureg,
        targets: *mut ::std::os::raw::c_int,
        numTargets: ::std::os::raw::c_int,
        ops: *mut ComplexMatrixN,
        numOps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mixNonTPKrausMap(
        qureg: Qureg,
        target: ::std::os::raw::c_int,
        ops: *mut ComplexMatrix2,
        numOps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mixNonTPTwoQubitKrausMap(
        qureg: Qureg,
        target1: ::std::os::raw::c_int,
        target2: ::std::os::raw::c_int,
        ops: *mut ComplexMatrix4,
        numOps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mixNonTPMultiQubitKrausMap(
        qureg: Qureg,
        targets: *mut ::std::os::raw::c_int,
        numTargets: ::std::os::raw::c_int,
        ops: *mut ComplexMatrixN,
        numOps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn calcHilbertSchmidtDistance(
        a: Qureg,
        b: Qureg,
    ) -> f64;
}
extern "C" {
    pub fn setWeightedQureg(
        fac1: Complex,
        qureg1: Qureg,
        fac2: Complex,
        qureg2: Qureg,
        facOut: Complex,
        out: Qureg,
    );
}
extern "C" {
    pub fn applyPauliSum(
        inQureg: Qureg,
        allPauliCodes: *mut pauliOpType,
        termCoeffs: *mut f64,
        numSumTerms: ::std::os::raw::c_int,
        outQureg: Qureg,
    );
}
extern "C" {
    pub fn applyPauliHamil(
        inQureg: Qureg,
        hamil: PauliHamil,
        outQureg: Qureg,
    );
}
extern "C" {
    pub fn applyTrotterCircuit(
        qureg: Qureg,
        hamil: PauliHamil,
        time: f64,
        order: ::std::os::raw::c_int,
        reps: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyMatrix2(
        qureg: Qureg,
        targetQubit: ::std::os::raw::c_int,
        u: ComplexMatrix2,
    );
}
extern "C" {
    pub fn applyMatrix4(
        qureg: Qureg,
        targetQubit1: ::std::os::raw::c_int,
        targetQubit2: ::std::os::raw::c_int,
        u: ComplexMatrix4,
    );
}
extern "C" {
    pub fn applyMatrixN(
        qureg: Qureg,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
        u: ComplexMatrixN,
    );
}
extern "C" {
    pub fn applyMultiControlledMatrixN(
        qureg: Qureg,
        ctrls: *mut ::std::os::raw::c_int,
        numCtrls: ::std::os::raw::c_int,
        targs: *mut ::std::os::raw::c_int,
        numTargs: ::std::os::raw::c_int,
        u: ComplexMatrixN,
    );
}
extern "C" {
    pub fn invalidQuESTInputError(
        errMsg: *const ::std::os::raw::c_char,
        errFunc: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn bindArraysToStackComplexMatrixN(
        numQubits: ::std::os::raw::c_int,
        re: *mut *mut f64,
        im: *mut *mut f64,
        reStorage: *mut *mut f64,
        imStorage: *mut *mut f64,
    ) -> ComplexMatrixN;
}
extern "C" {
    pub fn applyPhaseFunc(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubits: ::std::os::raw::c_int,
        encoding: bitEncoding,
        coeffs: *mut f64,
        exponents: *mut f64,
        numTerms: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyPhaseFuncOverrides(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubits: ::std::os::raw::c_int,
        encoding: bitEncoding,
        coeffs: *mut f64,
        exponents: *mut f64,
        numTerms: ::std::os::raw::c_int,
        overrideInds: *mut ::std::os::raw::c_longlong,
        overridePhases: *mut f64,
        numOverrides: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyMultiVarPhaseFunc(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubitsPerReg: *mut ::std::os::raw::c_int,
        numRegs: ::std::os::raw::c_int,
        encoding: bitEncoding,
        coeffs: *mut f64,
        exponents: *mut f64,
        numTermsPerReg: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyMultiVarPhaseFuncOverrides(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubitsPerReg: *mut ::std::os::raw::c_int,
        numRegs: ::std::os::raw::c_int,
        encoding: bitEncoding,
        coeffs: *mut f64,
        exponents: *mut f64,
        numTermsPerReg: *mut ::std::os::raw::c_int,
        overrideInds: *mut ::std::os::raw::c_longlong,
        overridePhases: *mut f64,
        numOverrides: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyNamedPhaseFunc(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubitsPerReg: *mut ::std::os::raw::c_int,
        numRegs: ::std::os::raw::c_int,
        encoding: bitEncoding,
        functionNameCode: phaseFunc,
    );
}
extern "C" {
    pub fn applyNamedPhaseFuncOverrides(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubitsPerReg: *mut ::std::os::raw::c_int,
        numRegs: ::std::os::raw::c_int,
        encoding: bitEncoding,
        functionNameCode: phaseFunc,
        overrideInds: *mut ::std::os::raw::c_longlong,
        overridePhases: *mut f64,
        numOverrides: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyParamNamedPhaseFunc(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubitsPerReg: *mut ::std::os::raw::c_int,
        numRegs: ::std::os::raw::c_int,
        encoding: bitEncoding,
        functionNameCode: phaseFunc,
        params: *mut f64,
        numParams: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyParamNamedPhaseFuncOverrides(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubitsPerReg: *mut ::std::os::raw::c_int,
        numRegs: ::std::os::raw::c_int,
        encoding: bitEncoding,
        functionNameCode: phaseFunc,
        params: *mut f64,
        numParams: ::std::os::raw::c_int,
        overrideInds: *mut ::std::os::raw::c_longlong,
        overridePhases: *mut f64,
        numOverrides: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyFullQFT(qureg: Qureg);
}
extern "C" {
    pub fn applyQFT(
        qureg: Qureg,
        qubits: *mut ::std::os::raw::c_int,
        numQubits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn applyProjector(
        qureg: Qureg,
        qubit: ::std::os::raw::c_int,
        outcome: ::std::os::raw::c_int,
    );
}
